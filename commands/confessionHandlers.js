const { db, pool } = require('../database/db');
const { confessionConfigs, confessions, confessionReplies } = require('../database/schema');
const { eq, and } = require('drizzle-orm');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const { logger, LogLevel, LogCategory } = require('../utils/logger');
const { containsBlacklistedContent } = require('../utils/blacklistFilter');
const cron = require('node-cron');

function isAdmin(member) {
  return member && member.permissions.has('Administrator');
}

// Random m√†u cho confession embed (gi·ªëng trong h√¨nh)
function getRandomConfessionColor() {
  const colors = [
    0x57F287, // Green
    0x5865F2, // Blue  
    0xEB459E, // Pink
    0x9B59B6, // Purple
    0xE67E22, // Orange
    0x1ABC9C  // Teal
  ];
  return colors[Math.floor(Math.random() * colors.length)];
}

async function handleConfession(interaction) {
  try {
    const content = interaction.options.getString('content');
    const serverId = interaction.guild?.id;
    const userId = interaction.user.id;

    if (!serverId) {
      return await interaction.reply({ 
        content: '‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ d√πng trong server!', 
        ephemeral: true 
      });
    }

    const blacklistResult = containsBlacklistedContent(content);
    if (blacklistResult.blocked) {
      return await interaction.reply({ 
        content: `üîí Confession c·ªßa b·∫°n ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p: **${blacklistResult.keyword}**\nVui l√≤ng ch·ªânh s·ª≠a v√† th·ª≠ l·∫°i!`, 
        ephemeral: true 
      });
    }

    const config = await db.select()
      .from(confessionConfigs)
      .where(eq(confessionConfigs.serverId, serverId))
      .limit(1);

    if (!config.length || !config[0].channelId || !config[0].isActive) {
      return await interaction.reply({ 
        content: '‚ùå H·ªá th·ªëng confession ch∆∞a ƒë∆∞·ª£c setup! Admin vui l√≤ng d√πng `/confessionsetup channel` ƒë·ªÉ c√†i ƒë·∫∑t.', 
        ephemeral: true 
      });
    }

    const confessionChannel = await interaction.guild.channels.fetch(config[0].channelId);
    if (!confessionChannel) {
      return await interaction.reply({ 
        content: '‚ùå K√™nh confession kh√¥ng t·ªìn t·∫°i! Admin vui l√≤ng setup l·∫°i.', 
        ephemeral: true 
      });
    }

    const result = await db.insert(confessions).values({
      serverId,
      userId,
      username: interaction.user.tag,
      content,
      status: 'active'
    }).returning();

    const confessionId = result[0].id;

    const replyButton = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`confession_reply_${confessionId}`)
          .setLabel(config[0].replyButtonLabel || 'üí¨ Tr·∫£ l·ªùi')
          .setStyle(ButtonStyle.Primary)
      );

    // T·∫°o embed ƒë·∫πp cho confession
    const confessionEmbed = new EmbedBuilder()
      .setTitle(`Anonymous Confession (#${confessionId})`)
      .setDescription(content)
      .setColor(getRandomConfessionColor())
      .setTimestamp();

    // Post confession v√†o channel tr∆∞·ªõc
    const confessionMessage = await confessionChannel.send({
      embeds: [confessionEmbed],
      components: [replyButton]
    });

    // T·∫°o thread t·ª´ message ƒë√≥
    const thread = await confessionMessage.startThread({
      name: `Confession #${confessionId}`,
      autoArchiveDuration: 1440,
      reason: 'Confession thread'
    });

    await db.update(confessions)
      .set({ 
        threadId: thread.id,
        threadUrl: thread.url 
      })
      .where(eq(confessions.id, confessionId));

    await thread.send({
      content: `üí° **H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:**\n‚Ä¢ D√πng n√∫t "üí¨ Tr·∫£ l·ªùi" ho·∫∑c l·ªánh \`/reply confession_id:${confessionId}\`\n‚Ä¢ M·ªçi reply s·∫Ω ƒë∆∞·ª£c ki·ªÉm duy·ªát ƒë·ªÉ tr√°nh spam v√† n·ªôi dung 18+\n‚Ä¢ H√£y t√¥n tr·ªçng ng∆∞·ªùi g·ª≠i confession v√† gi·ªØ th√°i ƒë·ªô l·ªãch s·ª±! üíï`
    });

    // Premium Feature: Log confession author to Discord channel (if configured)
    if (config[0].logConfessions && config[0].logChannelId) {
      try {
        const logChannel = await interaction.guild.channels.fetch(config[0].logChannelId);
        if (logChannel && logChannel.isTextBased()) {
          const logEmbed = new EmbedBuilder()
            .setTitle(`üîí Confession Author Log`)
            .setDescription(`**Confession #${confessionId}**`)
            .addFields(
              { name: 'üë§ Author', value: `${interaction.user.tag} (${interaction.user.id})`, inline: true },
              { name: 'üìç Thread', value: `[View Thread](${thread.url})`, inline: true },
              { name: 'üìù Content Preview', value: content.substring(0, 200) + (content.length > 200 ? '...' : ''), inline: false }
            )
            .setColor(0x9B59B6)
            .setTimestamp()
            .setFooter({ text: 'üîí Moderator Only - Keep Private' });
          
          await logChannel.send({ embeds: [logEmbed] });
        }
      } catch (error) {
        console.error('Error logging confession author to Discord:', error);
      }
    }

    await interaction.reply({ 
      content: `‚úÖ Confession c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i! ID: #${confessionId}\nüìç Xem t·∫°i: ${thread.url}`, 
      ephemeral: true 
    });

    await logger.log(
      LogLevel.INFO,
      LogCategory.COMMAND,
      `üìù Confession Sent`,
      interaction.guild,
      `ID: #${confessionId}\nUser: ${interaction.user.tag}\nThread: ${thread.url}`
    );

  } catch (error) {
    console.error('Error handling confession:', error);
    await interaction.reply({ 
      content: '‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i confession! Vui l√≤ng th·ª≠ l·∫°i sau.', 
      ephemeral: true 
    });
  }
}

async function handleReply(interaction) {
  try {
    const confessionId = interaction.options.getInteger('confession_id');
    const content = interaction.options.getString('content');
    const userId = interaction.user.id;
    const serverId = interaction.guild?.id;

    if (!serverId) {
      return await interaction.reply({ 
        content: '‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ d√πng trong server!', 
        ephemeral: true 
      });
    }

    const blacklistResult = containsBlacklistedContent(content);
    if (blacklistResult.blocked) {
      return await interaction.reply({ 
        content: `üîí Reply c·ªßa b·∫°n ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p: **${blacklistResult.keyword}**\nVui l√≤ng ch·ªânh s·ª≠a v√† th·ª≠ l·∫°i!`, 
        ephemeral: true 
      });
    }

    const confession = await db.select()
      .from(confessions)
      .where(and(
        eq(confessions.id, confessionId),
        eq(confessions.serverId, serverId)
      ))
      .limit(1);

    if (!confession.length) {
      return await interaction.reply({ 
        content: `‚ùå Kh√¥ng t√¨m th·∫•y confession #${confessionId} trong server n√†y!`, 
        ephemeral: true 
      });
    }

    if (confession[0].status !== 'active') {
      return await interaction.reply({ 
        content: `‚ùå Confession #${confessionId} ƒë√£ b·ªã x√≥a ho·∫∑c ·∫©n!`, 
        ephemeral: true 
      });
    }

    // Get confession config to check reply approval setting
    const config = await db.select()
      .from(confessionConfigs)
      .where(eq(confessionConfigs.serverId, serverId))
      .limit(1);

    const requireApproval = config.length > 0 ? config[0].requireReplyApproval : false;

    // Insert reply with appropriate status based on setting
    await db.insert(confessionReplies).values({
      confessionId,
      userId,
      content,
      status: requireApproval ? 'pending' : 'approved',
      isModerated: !requireApproval,
      moderatedBy: requireApproval ? null : 'auto'
    });

    // Only post to thread if auto-approved
    let threadUrl = null;
    if (!requireApproval && confession[0].threadId) {
      try {
        // T·∫°o embed ƒë·∫πp cho reply (·∫©n danh)
        const replyEmbed = new EmbedBuilder()
          .setTitle(`üí¨ Confession Reply (#${confessionId})`)
          .setDescription(content)
          .setColor(0xFEE75C) // M√†u v√†ng nh·∫π ƒë·ªÉ ph√¢n bi·ªát v·ªõi confession
          .setFooter({ text: 'Reply ·∫©n danh' })
          .setTimestamp();

        if (config.length && config[0].channelId) {
          const channel = await interaction.guild.channels.fetch(config[0].channelId);
          const thread = await channel.threads.fetch(confession[0].threadId);
          
          await thread.send({
            embeds: [replyEmbed]
          });
          
          threadUrl = thread.url;
        }
      } catch (error) {
        console.error('Error posting reply to thread:', error);
      }
    }

    // Reply ephemeral v·ªõi th√¥ng b√°o ph√π h·ª£p
    const successMessage = requireApproval
      ? `‚è≥ Reply c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i v√† ƒëang ch·ªù admin duy·ªát cho Confession #${confessionId}!`
      : `‚úÖ Reply c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o Confession #${confessionId}!${threadUrl ? `\nüìç Xem t·∫°i: ${threadUrl}` : ''}`;

    await interaction.reply({ 
      content: successMessage, 
      ephemeral: true 
    });

    await logger.log(
      LogLevel.INFO,
      LogCategory.COMMAND,
      `üí¨ Confession Reply`,
      interaction.guild,
      `Confession #${confessionId}\nUser: ${interaction.user.tag}`
    );

  } catch (error) {
    console.error('Error handling reply:', error);
    await interaction.reply({ 
      content: '‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i reply! Vui l√≤ng th·ª≠ l·∫°i sau.', 
      ephemeral: true 
    });
  }
}

async function handleConfessionSetup(interaction) {
  try {
    if (!isAdmin(interaction.member)) {
      return await interaction.reply({ 
        content: '‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ c√†i ƒë·∫∑t confession!', 
        ephemeral: true 
      });
    }

    const subcommand = interaction.options.getSubcommand();
    const serverId = interaction.guild.id;

    switch (subcommand) {
      case 'channel': {
        const channel = interaction.options.getChannel('target');
        
        if (channel.type !== ChannelType.GuildText) {
          return await interaction.reply({ 
            content: '‚ùå Vui l√≤ng ch·ªçn m·ªôt text channel!', 
            ephemeral: true 
          });
        }

        const existing = await db.select()
          .from(confessionConfigs)
          .where(eq(confessionConfigs.serverId, serverId))
          .limit(1);

        if (existing.length) {
          await db.update(confessionConfigs)
            .set({ 
              channelId: channel.id, 
              isActive: true,
              updatedAt: new Date()
            })
            .where(eq(confessionConfigs.serverId, serverId));
        } else {
          await db.insert(confessionConfigs).values({
            serverId,
            channelId: channel.id,
            isActive: true
          });
        }

        await interaction.reply({ 
          content: `‚úÖ ƒê√£ ƒë·∫∑t k√™nh confession th√†nh ${channel}!\n\nNg∆∞·ªùi d√πng c√≥ th·ªÉ g·ª≠i confession b·∫±ng:\n‚Ä¢ \`/confession\`\n‚Ä¢ DM bot v·ªõi: \`confession <n·ªôi dung>\`\n‚Ä¢ Button (d√πng \`/confessionsetup buttons\` ƒë·ªÉ t√πy ch·ªânh)`, 
          ephemeral: true 
        });

        await logger.log(
          LogLevel.INFO,
          LogCategory.CONFIG,
          `‚öôÔ∏è Confession Setup`,
          interaction.guild,
          `Channel set to: ${channel.name}\nBy: ${interaction.user.tag}`
        );
        break;
      }

      case 'remove': {
        await db.update(confessionConfigs)
          .set({ 
            channelId: null, 
            isActive: false,
            updatedAt: new Date()
          })
          .where(eq(confessionConfigs.serverId, serverId));

        await interaction.reply({ 
          content: `‚úÖ ƒê√£ x√≥a c·∫•u h√¨nh confession!`, 
          ephemeral: true 
        });

        await logger.log(
          LogLevel.INFO,
          LogCategory.CONFIG,
          `‚öôÔ∏è Confession Removed`,
          interaction.guild,
          `By: ${interaction.user.tag}`
        );
        break;
      }

      case 'buttons': {
        const confessionButton = interaction.options.getString('confession_button');
        const replyButton = interaction.options.getString('reply_button');

        if (!confessionButton && !replyButton) {
          return await interaction.reply({ 
            content: '‚ùå Vui l√≤ng cung c·∫•p √≠t nh·∫•t m·ªôt t√™n n√∫t!', 
            ephemeral: true 
          });
        }

        const updates = {};
        if (confessionButton) updates.buttonLabel = confessionButton;
        if (replyButton) updates.replyButtonLabel = replyButton;
        updates.updatedAt = new Date();

        await db.update(confessionConfigs)
          .set(updates)
          .where(eq(confessionConfigs.serverId, serverId));

        let message = '‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n n√∫t:\n';
        if (confessionButton) message += `‚Ä¢ N√∫t Confession: ${confessionButton}\n`;
        if (replyButton) message += `‚Ä¢ N√∫t Reply: ${replyButton}\n`;

        await interaction.reply({ 
          content: message, 
          ephemeral: true 
        });
        break;
      }

      case 'status': {
        const config = await db.select()
          .from(confessionConfigs)
          .where(eq(confessionConfigs.serverId, serverId))
          .limit(1);

        if (!config.length) {
          return await interaction.reply({ 
            content: '‚ùå Ch∆∞a c√≥ c·∫•u h√¨nh confession! D√πng `/confessionsetup channel` ƒë·ªÉ setup.', 
            ephemeral: true 
          });
        }

        const channel = config[0].channelId 
          ? await interaction.guild.channels.fetch(config[0].channelId).catch(() => null)
          : null;

        const totalConfessions = await db.select()
          .from(confessions)
          .where(eq(confessions.serverId, serverId));

        const status = `üìä **Tr·∫°ng th√°i Confession System**\n\n` +
          `**K√™nh:** ${channel ? channel.toString() : '‚ùå Ch∆∞a setup'}\n` +
          `**Tr·∫°ng th√°i:** ${config[0].isActive ? '‚úÖ Ho·∫°t ƒë·ªông' : '‚ùå T·∫Øt'}\n` +
          `**N√∫t Confession:** ${config[0].buttonLabel}\n` +
          `**N√∫t Reply:** ${config[0].replyButtonLabel}\n` +
          `**T·ªïng confessions:** ${totalConfessions.length}\n\n` +
          `*C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: <t:${Math.floor(new Date(config[0].updatedAt).getTime() / 1000)}:R>*`;

        await interaction.reply({ 
          content: status, 
          ephemeral: true 
        });
        break;
      }

      case 'clear': {
        const confessionsToDelete = await db.select()
          .from(confessions)
          .where(eq(confessions.serverId, serverId));

        if (confessionsToDelete.length === 0) {
          return await interaction.reply({ 
            content: '‚ùå Kh√¥ng c√≥ confession n√†o ƒë·ªÉ x√≥a!', 
            ephemeral: true 
          });
        }

        const confirmMessage = `‚ö†Ô∏è **C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!**\n\n` +
          `B·∫°n c√≥ ch·∫Øc mu·ªën **X√ìA TO√ÄN B·ªò ${confessionsToDelete.length} confession** v√† reply c·ªßa server n√†y?`;

        const confirmButton = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId(`confession_clear_confirm_${serverId}`)
              .setLabel('‚úÖ X√°c nh·∫≠n x√≥a')
              .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
              .setCustomId(`confession_clear_cancel_${serverId}`)
              .setLabel('‚ùå H·ªßy b·ªè')
              .setStyle(ButtonStyle.Secondary)
          );

        await interaction.reply({ 
          content: confirmMessage, 
          components: [confirmButton],
          ephemeral: true 
        });
        break;
      }
    }

  } catch (error) {
    console.error('Error in confession setup:', error);
    await interaction.reply({ 
      content: '‚ùå C√≥ l·ªói x·∫£y ra! Vui l√≤ng th·ª≠ l·∫°i sau.', 
      ephemeral: true 
    });
  }
}

async function handleConfessionButton(interaction) {
  const customId = interaction.customId;
  
  // Button: G·ª≠i Confession (m·ªü modal)
  if (customId === 'send_confession') {
    const serverId = interaction.guild?.id;
    
    if (!serverId) {
      return await interaction.reply({ 
        content: '‚ùå Button n√†y ch·ªâ ho·∫°t ƒë·ªông trong server!', 
        ephemeral: true 
      });
    }

    // Ki·ªÉm tra xem confession c√≥ ƒë∆∞·ª£c setup ch∆∞a
    const config = await db.select()
      .from(confessionConfigs)
      .where(eq(confessionConfigs.serverId, serverId))
      .limit(1);

    if (!config.length || !config[0].channelId || !config[0].isActive) {
      return await interaction.reply({ 
        content: '‚ùå H·ªá th·ªëng confession ch∆∞a ƒë∆∞·ª£c setup! Admin vui l√≤ng d√πng `/confessionsetup channel` ƒë·ªÉ c√†i ƒë·∫∑t.', 
        ephemeral: true 
      });
    }

    // M·ªü modal ƒë·ªÉ g·ª≠i confession
    const modal = new ModalBuilder()
      .setCustomId('send_confession_modal')
      .setTitle('üìù G·ª≠i Confession ·∫®n Danh');

    const confessionInput = new TextInputBuilder()
      .setCustomId('confession_content')
      .setLabel('N·ªôi dung confession')
      .setPlaceholder('Vi·∫øt ƒëi·ªÅu b·∫°n mu·ªën chia s·∫ª m·ªôt c√°ch ·∫©n danh...')
      .setStyle(TextInputStyle.Paragraph)
      .setRequired(true)
      .setMinLength(10)
      .setMaxLength(2000);

    const actionRow = new ActionRowBuilder().addComponents(confessionInput);
    modal.addComponents(actionRow);

    await interaction.showModal(modal);
  } 
  // Button: Reply Confession (m·ªü modal)
  else if (customId.startsWith('confession_reply_')) {
    const confessionId = parseInt(customId.replace('confession_reply_', ''));
    
    const modal = new ModalBuilder()
      .setCustomId(`confession_reply_modal_${confessionId}`)
      .setTitle(`Tr·∫£ l·ªùi Confession #${confessionId}`);

    const replyInput = new TextInputBuilder()
      .setCustomId('reply_content')
      .setLabel('N·ªôi dung tr·∫£ l·ªùi')
      .setStyle(TextInputStyle.Paragraph)
      .setRequired(true)
      .setMaxLength(1000);

    const actionRow = new ActionRowBuilder().addComponents(replyInput);
    modal.addComponents(actionRow);

    await interaction.showModal(modal);
  } else if (customId.startsWith('confession_clear_confirm_')) {
    const serverId = customId.replace('confession_clear_confirm_', '');
    
    if (!isAdmin(interaction.member)) {
      return await interaction.update({ 
        content: '‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ x√≥a confession!', 
        components: [],
        ephemeral: true 
      });
    }

    try {
      const confessionsToDelete = await db.select()
        .from(confessions)
        .where(eq(confessions.serverId, serverId));

      const confessionIds = confessionsToDelete.map(c => c.id);

      if (confessionIds.length > 0) {
        for (const confessionId of confessionIds) {
          await db.delete(confessionReplies)
            .where(eq(confessionReplies.confessionId, confessionId));
        }
      }

      await db.delete(confessions)
        .where(eq(confessions.serverId, serverId));

      await interaction.update({ 
        content: `‚úÖ ƒê√£ x√≥a **${confessionsToDelete.length}** confession v√† t·∫•t c·∫£ reply li√™n quan!`, 
        components: [],
        ephemeral: true 
      });

      await logger.log(
        LogLevel.WARN,
        LogCategory.CONFIG,
        `üóëÔ∏è Confession History Cleared`,
        interaction.guild,
        `Deleted: ${confessionsToDelete.length} confessions\nBy: ${interaction.user.tag}`
      );
    } catch (error) {
      console.error('Error clearing confessions:', error);
      await interaction.update({ 
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a confession!', 
        components: [],
        ephemeral: true 
      });
    }
  } else if (customId.startsWith('confession_clear_cancel_')) {
    await interaction.update({ 
      content: '‚ùå ƒê√£ h·ªßy b·ªè thao t√°c x√≥a confession.', 
      components: [],
      ephemeral: true 
    });
  }
}

async function handleConfessionModal(interaction) {
  try {
    const customId = interaction.customId;
    
    // Modal: G·ª≠i Confession t·ª´ button
    if (customId === 'send_confession_modal') {
      const content = interaction.fields.getTextInputValue('confession_content');
      const serverId = interaction.guild?.id;
      const userId = interaction.user.id;

      if (!serverId) {
        return await interaction.reply({ 
          content: '‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ d√πng trong server!', 
          ephemeral: true 
        });
      }

      const blacklistResult = containsBlacklistedContent(content);
      if (blacklistResult.blocked) {
        return await interaction.reply({ 
          content: `üîí Confession c·ªßa b·∫°n ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p: **${blacklistResult.keyword}**\nVui l√≤ng ch·ªânh s·ª≠a v√† th·ª≠ l·∫°i!`, 
          ephemeral: true 
        });
      }

      const config = await db.select()
        .from(confessionConfigs)
        .where(eq(confessionConfigs.serverId, serverId))
        .limit(1);

      if (!config.length || !config[0].channelId || !config[0].isActive) {
        return await interaction.reply({ 
          content: '‚ùå H·ªá th·ªëng confession ch∆∞a ƒë∆∞·ª£c setup! Admin vui l√≤ng d√πng `/confessionsetup channel` ƒë·ªÉ c√†i ƒë·∫∑t.', 
          ephemeral: true 
        });
      }

      const confessionChannel = await interaction.guild.channels.fetch(config[0].channelId);
      if (!confessionChannel) {
        return await interaction.reply({ 
          content: '‚ùå K√™nh confession kh√¥ng t·ªìn t·∫°i! Admin vui l√≤ng setup l·∫°i.', 
          ephemeral: true 
        });
      }

      const result = await db.insert(confessions).values({
        serverId,
        userId,
        content,
        status: 'active'
      }).returning();

      const confessionId = result[0].id;

      const replyButton = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`confession_reply_${confessionId}`)
            .setLabel(config[0].replyButtonLabel || 'üí¨ Tr·∫£ l·ªùi')
            .setStyle(ButtonStyle.Primary)
        );

      const confessionEmbed = new EmbedBuilder()
        .setTitle(`Anonymous Confession (#${confessionId})`)
        .setDescription(content)
        .setColor(getRandomConfessionColor())
        .setTimestamp();

      const confessionMessage = await confessionChannel.send({
        embeds: [confessionEmbed],
        components: [replyButton]
      });

      const thread = await confessionMessage.startThread({
        name: `Confession #${confessionId}`,
        autoArchiveDuration: 1440,
        reason: 'Confession thread'
      });

      await db.update(confessions)
        .set({ threadId: thread.id })
        .where(eq(confessions.id, confessionId));

      await thread.send({
        content: `üí° **H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:**\n‚Ä¢ D√πng n√∫t "üí¨ Tr·∫£ l·ªùi" ho·∫∑c l·ªánh \`/reply confession_id:${confessionId}\`\n‚Ä¢ M·ªçi reply s·∫Ω ƒë∆∞·ª£c ki·ªÉm duy·ªát ƒë·ªÉ tr√°nh spam v√† n·ªôi dung 18+\n‚Ä¢ H√£y t√¥n tr·ªçng ng∆∞·ªùi g·ª≠i confession v√† gi·ªØ th√°i ƒë·ªô l·ªãch s·ª±! üíï`
      });

      await interaction.reply({ 
        content: `‚úÖ Confession c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i! ID: #${confessionId}\nüìç Xem t·∫°i: ${thread.url}`, 
        ephemeral: true 
      });

      await logger.log(
        LogLevel.INFO,
        LogCategory.COMMAND,
        `üìù Confession Sent (Button)`,
        interaction.guild,
        `ID: #${confessionId}\nUser: ${interaction.user.tag}\nThread: ${thread.url}`
      );
    }
    // Modal: Reply Confession
    else if (customId.startsWith('confession_reply_modal_')) {
      const confessionId = parseInt(customId.replace('confession_reply_modal_', ''));
      const content = interaction.fields.getTextInputValue('reply_content');
      const userId = interaction.user.id;
      const serverId = interaction.guild.id;

      const blacklistResult = containsBlacklistedContent(content);
      if (blacklistResult.blocked) {
        return await interaction.reply({ 
          content: `üîí Reply c·ªßa b·∫°n ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p: **${blacklistResult.keyword}**\nVui l√≤ng ch·ªânh s·ª≠a v√† th·ª≠ l·∫°i!`, 
          ephemeral: true 
        });
      }

      const confession = await db.select()
        .from(confessions)
        .where(and(
          eq(confessions.id, confessionId),
          eq(confessions.serverId, serverId)
        ))
        .limit(1);

      if (!confession.length || confession[0].status !== 'active') {
        return await interaction.reply({ 
          content: `‚ùå Confession kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!`, 
          ephemeral: true 
        });
      }

      await db.insert(confessionReplies).values({
        confessionId,
        userId,
        content,
        status: 'approved',
        isModerated: true,
        moderatedBy: 'auto'
      });

      // T·∫°o embed ƒë·∫πp cho reply (·∫©n danh)
      const replyEmbed = new EmbedBuilder()
        .setTitle(`üí¨ Confession Reply (#${confessionId})`)
        .setDescription(content)
        .setColor(0xFEE75C) // M√†u v√†ng nh·∫π ƒë·ªÉ ph√¢n bi·ªát v·ªõi confession
        .setFooter({ text: 'Reply ·∫©n danh' })
        .setTimestamp();

      // G·ª≠i reply v√†o thread confession
      let threadUrl = null;
      if (confession[0].threadId) {
        try {
          const config = await db.select()
            .from(confessionConfigs)
            .where(eq(confessionConfigs.serverId, serverId))
            .limit(1);

          if (config.length && config[0].channelId) {
            const channel = await interaction.guild.channels.fetch(config[0].channelId);
            const thread = await channel.threads.fetch(confession[0].threadId);
            
            await thread.send({
              embeds: [replyEmbed]
            });
            
            threadUrl = thread.url;
          }
        } catch (error) {
          console.error('Error posting reply to thread:', error);
        }
      }

      // Reply ephemeral ƒë·ªÉ th√¥ng b√°o th√†nh c√¥ng
      await interaction.reply({ 
        content: `‚úÖ Reply c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o Confession #${confessionId}!${threadUrl ? `\nüìç Xem t·∫°i: ${threadUrl}` : ''}`, 
        ephemeral: true 
      });

      await logger.log(
        LogLevel.INFO,
        LogCategory.COMMAND,
        `üí¨ Confession Reply (Button)`,
        interaction.guild,
        `Confession #${confessionId}\nUser: ${interaction.user.tag}`
      );
    }
  } catch (error) {
    console.error('Error handling confession modal:', error);
    await interaction.reply({ 
      content: '‚ùå C√≥ l·ªói x·∫£y ra! Vui l√≤ng th·ª≠ l·∫°i sau.', 
      ephemeral: true 
    });
  }
}

async function handleConfessionPanel(interaction) {
  try {
    if (!isAdmin(interaction.member)) {
      return await interaction.reply({ 
        content: '‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ t·∫°o confession panel!', 
        ephemeral: true 
      });
    }

    const serverId = interaction.guild.id;
    const channel = interaction.options.getChannel('channel') || interaction.channel;

    // Ki·ªÉm tra xem confession c√≥ ƒë∆∞·ª£c setup ch∆∞a
    const config = await db.select()
      .from(confessionConfigs)
      .where(eq(confessionConfigs.serverId, serverId))
      .limit(1);

    if (!config.length || !config[0].channelId || !config[0].isActive) {
      return await interaction.reply({ 
        content: '‚ùå H·ªá th·ªëng confession ch∆∞a ƒë∆∞·ª£c setup! Admin vui l√≤ng d√πng `/confessionsetup channel` ƒë·ªÉ c√†i ƒë·∫∑t tr∆∞·ªõc.', 
        ephemeral: true 
      });
    }

    const buttonLabel = config[0].buttonLabel || 'üìù G·ª≠i Confession';

    const confessionButton = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('send_confession')
          .setLabel(buttonLabel)
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üìù')
      );

    const panelEmbed = new EmbedBuilder()
      .setTitle('üìÆ Anonymous Confession')
      .setDescription(
        '**G·ª≠i confession ·∫©n danh c·ªßa b·∫°n!**\n\n' +
        '‚Ä¢ Click n√∫t b√™n d∆∞·ªõi ƒë·ªÉ m·ªü form g·ª≠i confession\n' +
        '‚Ä¢ M·ªçi confession ƒë·ªÅu ho√†n to√†n ·∫©n danh\n' +
        '‚Ä¢ T√¥n tr·ªçng ng∆∞·ªùi kh√°c v√† tr√°nh n·ªôi dung 18+\n' +
        '‚Ä¢ Admin c√≥ quy·ªÅn x√≥a confession vi ph·∫°m quy t·∫Øc\n\n' +
        `üí° Confession s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn: <#${config[0].channelId}>`
      )
      .setColor(0x5865F2)
      .setFooter({ text: 'H√£y c·∫©n th·∫≠n v·ªõi l·ªùi n√≥i c·ªßa b·∫°n! üíï' })
      .setTimestamp();

    await channel.send({
      embeds: [panelEmbed],
      components: [confessionButton]
    });

    await interaction.reply({ 
      content: `‚úÖ ƒê√£ t·∫°o Confession Panel t·∫°i ${channel}!\nUser c√≥ th·ªÉ click button ƒë·ªÉ g·ª≠i confession ·∫©n danh.`, 
      ephemeral: true 
    });

    await logger.log(
      LogLevel.INFO,
      LogCategory.CONFIG,
      `üìÆ Confession Panel Created`,
      interaction.guild,
      `Channel: ${channel.name}\nBy: ${interaction.user.tag}`
    );

  } catch (error) {
    console.error('Error creating confession panel:', error);
    await interaction.reply({ 
      content: '‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o confession panel!', 
      ephemeral: true 
    });
  }
}

// Check and post approved confession replies
async function checkAndPostApprovedReplies(client) {
  try {
    // Get all approved but not posted replies
    const approvedReplies = await db.select({
      replyId: confessionReplies.id,
      confessionId: confessionReplies.confessionId,
      userId: confessionReplies.userId,
      content: confessionReplies.content,
      threadId: confessions.threadId,
      threadUrl: confessions.threadUrl,
      serverId: confessions.serverId
    })
      .from(confessionReplies)
      .innerJoin(confessions, eq(confessionReplies.confessionId, confessions.id))
      .where(and(
        eq(confessionReplies.status, 'approved'),
        eq(confessionReplies.isPosted, false)
      ));

    for (const reply of approvedReplies) {
      try {
        if (!reply.threadId) continue;

        const guild = await client.guilds.fetch(reply.serverId).catch(() => null);
        if (!guild) continue;

        const thread = await guild.channels.fetch(reply.threadId).catch(() => null);
        if (!thread) continue;

        // Post reply to thread
        const replyEmbed = new EmbedBuilder()
          .setColor(0x00D9FF)
          .setDescription(reply.content)
          .setFooter({ text: `Reply #${reply.replyId} ‚Ä¢ Approved by Admin` })
          .setTimestamp();

        await thread.send({ embeds: [replyEmbed] });

        // Mark as posted
        await db.update(confessionReplies)
          .set({ isPosted: true })
          .where(eq(confessionReplies.id, reply.replyId));

        console.log(`‚úÖ Posted approved reply #${reply.replyId} to thread ${reply.threadId}`);
      } catch (error) {
        console.error(`‚ùå Failed to post approved reply #${reply.replyId}:`, error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå Error checking approved replies:', error.message);
  }
}

// Start cron job to check approved replies every minute
function startApprovedRepliesChecker(client) {
  cron.schedule('*/1 * * * *', () => {
    checkAndPostApprovedReplies(client);
  });
  
  console.log('‚úÖ Started approved replies checker (runs every minute)');
}

module.exports = {
  handleConfession,
  handleReply,
  handleConfessionSetup,
  handleConfessionPanel,
  handleConfessionButton,
  handleConfessionModal,
  getRandomConfessionColor,
  checkAndPostApprovedReplies,
  startApprovedRepliesChecker
};
